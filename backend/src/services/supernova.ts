import { ModelConfig } from '../types/models';

export class SupernovaService {
  private apiKey: string;
  private baseUrl: string;

  constructor() {
    this.apiKey = process.env.SUPERNOVA_API_KEY || '';
    this.baseUrl = 'https://api.supernova.ai/v1';
  }

  async generateCode(prompt: string, model: string = 'supernova-fast'): Promise<string> {
    console.log('[supernova] generateCode called with model:', model);
    console.log('[supernova] API key loaded:', this.apiKey ? 'YES' : 'NO');
    console.log('[supernova] Prompt length:', prompt.length);

    if (!this.apiKey) {
      console.log('[supernova] No API key provided, using mock response');
      return this.generateMockResponse(prompt, model);
    }

    console.log('[supernova] API key is available, making request to Supernova API');

    try {
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: model,
          messages: [
            {
              role: 'system',
              content: 'You are Supernova AI, a highly capable AI assistant focused on code generation and problem solving.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 4096,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`Supernova API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      return data.choices?.[0]?.message?.content || '';
    } catch (error) {
      console.error('Supernova service error:', error);
      // Fallback to mock response on error
      return this.generateMockResponse(prompt, model);
    }
  }

  private generateMockResponse(prompt: string, model: string): string {
    // Enhanced mock responses based on prompt content
    const promptLower = prompt.toLowerCase();

    if (promptLower.includes('react') || promptLower.includes('component')) {
      return `// Supernova AI Generated Component (${model})
import React, { useState, useEffect } from 'react';

interface Props {
  title?: string;
  children?: React.ReactNode;
}

export default function GeneratedComponent({ title = "Hello", children }: Props) {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log("Component mounted with title:", title);
  }, [title]);

  return (
    <div className="generated-component" style={{ padding: '20px', border: '1px solid #ccc' }}>
      <h2>{title} - Count: {count}</h2>
      <button onClick={() => setCount(c => c + 1)}>
        Increment
      </button>
      {children}
    </div>
  );
}`;
    }

    if (promptLower.includes('function') || promptLower.includes('algorithm')) {
      return `// Supernova AI Generated Function (${model})
/**
 * Generated function based on your requirements
 * Model: ${model}
 * Generated at: ${new Date().toISOString()}
 */

export function generatedFunction(input: any): any {
  // Input validation
  if (!input) {
    throw new Error('Input is required');
  }

  // Process the input
  const result = {
    processed: true,
    input: input,
    timestamp: Date.now(),
    model: '${model}'
  };

  // Return processed result
  return result;
}

// Example usage:
// const result = generatedFunction("test input");
// console.log(result);`;
    }

    // Default response
    return `// Supernova AI Response (${model})
// Generated code based on your prompt

function supernovaGeneratedCode() {
  // This is a mock response from ${model}
  // In a real implementation, this would be generated by the actual model

  console.log("Generated by Supernova AI");
  console.log("Prompt length:", "${prompt.length}");
  console.log("Model:", "${model}");

  return "Code generation complete";
}

export default supernovaGeneratedCode;`;
  }

  async generateWithModel(prompt: string, modelConfig: ModelConfig): Promise<string> {
    return this.generateCode(prompt, modelConfig.name.toLowerCase().replace('supernova-', 'supernova-'));
  }

  getAvailableModels(): string[] {
    return ['supernova-fast', 'supernova-pro'];
  }

  // Demo method to showcase capabilities
  getDemoCapabilities(): string[] {
    return [
      'Fast inference for quick iterations',
      'High-quality code generation',
      'Multi-language support',
      'Context-aware responses',
      'Cost-effective scaling'
    ];
  }
}