import { spawn } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';
import * as QRCode from 'qrcode';
import { ProjectSnapshot } from '../types/version-control';

export interface FlutterProjectConfig {
  name: string;
  description?: string;
  version: string;
  org: string; // com.example.app
  flutterVersion?: string;
  primaryColor?: string;
  themeMode?: 'light' | 'dark' | 'system';
}

export interface FlutterExportResult {
  success: boolean;
  projectPath: string;
  apkPath?: string;
  ipaPath?: string;
  webUrl?: string;
  qrCode?: string;
  qrCodeDataURL?: string;
  error?: string;
}

export class FlutterService {
  private flutterPath: string;

  constructor() {
    // Use flutter command directly
    this.flutterPath = 'flutter';
  }

  /**
   * Create a new Flutter project from generated code
   */
  async createFlutterProject(
    code: string,
    config: FlutterProjectConfig,
    outputDir: string = './exports'
  ): Promise<FlutterExportResult> {
    try {
      // Ensure output directory exists
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      const projectPath = path.join(outputDir, config.name.toLowerCase().replace(/\s+/g, '_'));

      // Create Flutter project using CLI
      await this.runFlutterCommand(['create', config.name.toLowerCase().replace(/\s+/g, '_'), '--org', config.org], outputDir);

      // Generate Flutter widget from the provided code
      const mainDart = this.generateFlutterApp(code, config);

      // Write the main.dart file
      const libPath = path.join(projectPath, 'lib');
      const mainPath = path.join(libPath, 'main.dart');
      fs.writeFileSync(mainPath, mainDart, 'utf8');

      // Update pubspec.yaml with project config
      const pubspecPath = path.join(projectPath, 'pubspec.yaml');
      let pubspecContent = fs.readFileSync(pubspecPath, 'utf8');

      // Update project metadata
      pubspecContent = pubspecContent
        .replace(/name: .*/, `name: ${config.name.toLowerCase().replace(/\s+/g, '_')}`)
        .replace(/description: .*/, `description: ${config.description || 'A Flutter app generated by Vibe Coder'}`)
        .replace(/version: .*/, `version: ${config.version}`);

      fs.writeFileSync(pubspecPath, pubspecContent, 'utf8');

      return {
        success: true,
        projectPath
      };
    } catch (error) {
      return {
        success: false,
        projectPath: '',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * Build Flutter app for Android (APK)
   */
  async buildApk(projectPath: string): Promise<FlutterExportResult> {
    try {
      // Run flutter build apk
      await this.runFlutterCommand(['build', 'apk', '--release'], projectPath);

      const apkPath = path.join(projectPath, 'build', 'app', 'outputs', 'flutter-apk', 'app-release.apk');

      return {
        success: true,
        projectPath,
        apkPath
      };
    } catch (error) {
      return {
        success: false,
        projectPath,
        error: error instanceof Error ? error.message : 'APK build failed'
      };
    }
  }

  /**
   * Build Flutter app for iOS (IPA) - requires macOS
   */
  async buildIpa(projectPath: string): Promise<FlutterExportResult> {
    try {
      // Run flutter build ipa
      await this.runFlutterCommand(['build', 'ipa', '--release'], projectPath);

      const ipaPath = path.join(projectPath, 'build', 'ios', 'ipa', `${path.basename(projectPath)}.ipa`);

      return {
        success: true,
        projectPath,
        ipaPath
      };
    } catch (error) {
      return {
        success: false,
        projectPath,
        error: error instanceof Error ? error.message : 'IPA build failed'
      };
    }
  }

  /**
   * Run Flutter web server for preview
   */
  async runWebServer(projectPath: string, port: number = 8080): Promise<FlutterExportResult> {
    try {
      // Build for web first
      await this.runFlutterCommand(['build', 'web'], projectPath);

      // Start web server
      const webUrl = `http://localhost:${port}`;

      // Generate QR code for mobile access
      const qrCodeDataURL = await QRCode.toDataURL(webUrl, {
        width: 256,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });

      return {
        success: true,
        projectPath,
        webUrl,
        qrCode: webUrl,
        qrCodeDataURL
      };
    } catch (error) {
      return {
        success: false,
        projectPath,
        error: error instanceof Error ? error.message : 'Web server failed'
      };
    }
  }

  /**
   * Generate Flutter App widget from code
   */
  private generateFlutterApp(code: string, config: FlutterProjectConfig): string {
    // Try to extract Flutter widget from the generated code
    let widgetCode = code;

    // If it's a complete Flutter widget, use it directly
    if (code.includes('class') && code.includes('extends StatelessWidget')) {
      // Wrap in MaterialApp structure
      return `
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '${config.name}',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: ${this.hexToColor(config.primaryColor || '#2196F3')}),
        useMaterial3: true,
      ),
      home: const HomePage(),
    );
  }
}

${widgetCode}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text('${config.name}'),
      ),
      body: const Center(
        child: GeneratedWidget(),
      ),
    );
  }
}
`;
    } else {
      // Fallback: create a simple Flutter app
      return `
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '${config.name}',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: ${this.hexToColor(config.primaryColor || '#2196F3')}),
        useMaterial3: true,
      ),
      home: const HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text('${config.name}'),
      ),
      body: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Generated Flutter App',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20),
            Text(
              'Generated by Vibe Coder',
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }
}
`;
    }
  }

  /**
   * Convert hex color to Flutter Color
   */
  private hexToColor(hex: string): string {
    // Remove # if present
    hex = hex.replace('#', '');

    // Parse hex to RGB
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);

    return `Color(0xFF${hex.toUpperCase()})`;
  }

  /**
   * Run Flutter CLI command
   */
  private async runFlutterCommand(args: string[], cwd?: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const child = spawn(this.flutterPath, args, {
        cwd: cwd || process.cwd(),
        stdio: 'inherit'
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Flutter command failed with code ${code}`));
        }
      });

      child.on('error', (error) => {
        reject(error);
      });
    });
  }

  /**
   * Convert project snapshot to Flutter project
   */
  async snapshotToFlutterProject(snapshot: ProjectSnapshot, config: FlutterProjectConfig): Promise<FlutterExportResult> {
    try {
      const outputDir = './exports';
      const projectPath = path.join(outputDir, config.name.toLowerCase().replace(/\s+/g, '_'));

      // Create Flutter project
      await this.runFlutterCommand(['create', config.name.toLowerCase().replace(/\s+/g, '_'), '--org', config.org], outputDir);

      // Copy snapshot files
      for (const file of snapshot.files) {
        if (file.language === 'dart') {
          const relativePath = file.path.startsWith('/') ? file.path.substring(1) : file.path;
          const targetPath = path.join(projectPath, relativePath);

          // Ensure directory exists
          const dir = path.dirname(targetPath);
          if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
          }

          fs.writeFileSync(targetPath, file.content, 'utf8');
        }
      }

      // Create main.dart if not exists
      const libPath = path.join(projectPath, 'lib');
      const mainPath = path.join(libPath, 'main.dart');
      if (!fs.existsSync(mainPath)) {
        const mainDart = this.generateFlutterApp('', config);
        fs.writeFileSync(mainPath, mainDart, 'utf8');
      }

      return {
        success: true,
        projectPath
      };
    } catch (error) {
      return {
        success: false,
        projectPath: '',
        error: error instanceof Error ? error.message : 'Failed to convert snapshot'
      };
    }
  }
}